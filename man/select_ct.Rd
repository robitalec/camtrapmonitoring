% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/select-ct.R
\name{select_ct}
\alias{select_ct}
\title{Select camera trap locations}
\usage{
select_ct(x, n, rank = NULL, sub = NULL, by = NULL)
}
\arguments{
\item{x}{data.table or sf points.}

\item{n}{number of locations to select. if \code{by} is provided, \code{select_ct} will select \code{n} for each group defined in \code{by}.}

\item{rank}{character vector of column name(s) in \code{x} to rank rows.}

\item{sub}{an expression. See Details.}

\item{by}{character vector of column name(s) in \code{x} to form groups. if \code{by} is provided, ranking and subsetting will occur within in each group.}
}
\description{
Select camera trap locations by subsetting (\code{sub}) and ranking (\code{rank}) locations in each group (\code{by}).
}
\details{
\code{n} is the number of locations to select. When groups are defined with \code{by}, the number of locations will be selected for each group.

\code{sub} is an expression used to subset the input \code{x}. It should not be quoted and follow the form described by \link[data.table]{data.table}'s argument \code{i}. \strong{Note:} if the column provided has a unit (e.g.: those returned by \code{eval_dist}), the expression should use those units as well. For example, \verb{sub = expression(distwater < as_units(50, 'm')}.

\code{by} is a character vector of column names in \code{x} to group camera trap locations and rank. This should match (at least) the column provided to \code{sample_ct}, if it was used to generate potential locations.

Note: NAs are omitted from input x before select camera trap locations.
}
\examples{
# Packages
library(data.table)
library(units)
library(sf)

# Data
data(densitygrid)
data(lc)
data(dem)
data(wetland)
data(water)

# CRS
utm <- st_crs(water)

# Stratified random sampling
pts <- sample_ct(densitygrid, n = 5, type = 'random', col = 'density', returnDT = TRUE)

# Evaluate layers
pts[, lc := eval_pt(.SD, lc, type = 'categorical', direction = 'neutral', coords = c('X', 'Y'))]

pts[, dem := eval_buffer(.SD, dem, 100, type = 'real', direction = 'positive', coords = c('X', 'Y'))]

pts[, wetland := eval_buffer(.SD, wetland, 100, 'binary', 'negative', coords = c('X', 'Y'))]

pts[, distwater := eval_dist(.SD, water, direction = 'positive', coords = c('X', 'Y'), crs = utm)]

# Select n locations
n <- 1

sel <- select_ct(pts, n, rank = c('wetland'), sub = expression(distwater > as_units(50, 'm')), by = c('lc', 'density'))

}
